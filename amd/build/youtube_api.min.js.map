{"version":3,"sources":["../src/youtube_api.js"],"names":["videos","players","init","initPlayer","observer","MutationObserver","document","querySelectorAll","length","observe","subtree","childList","forEach","node","playerid","id","split","videoid","videouniqid","getJsonObjectFromIdAttribut","loadPlayers","Object","entries","key","value","createYouTubePlayer","ytparam","uniqeid","YT","Player","videoId","playerVars","events","catchError","event","data","window","console","log","attribut","uniqid","jsonobj","JSON","parse","getElementById","getAttribute"],"mappings":"2mCAwBIA,CAAAA,CAAM,CAAG,E,CACTC,CAAO,CAAG,E,QAEM,QAAPC,CAAAA,IAAO,EAAM,CACtBC,CAAU,GAGV,GAAIC,CAAAA,CAAQ,CAAG,GAAIC,CAAAA,gBAAJ,CAAqB,UAAY,CAE5C,GAA+D,CAA3D,CAAAC,QAAQ,CAACC,gBAAT,CAA0B,sBAA1B,EAAkDC,MAAtD,CAAkE,CAC9DL,CAAU,EACb,CACJ,CALc,CAAf,CASAC,CAAQ,CAACK,OAAT,CAAiBH,QAAjB,CAA2B,CACvBI,OAAO,GADgB,CAEvBC,SAAS,GAFc,CAA3B,CAIH,C,CAKD,QAASR,CAAAA,CAAT,EAAsB,CAElBG,QAAQ,CAACC,gBAAT,CAA0B,sBAA1B,EAAkDK,OAAlD,CAA0D,SAAUC,CAAV,CAAgB,IAClEC,CAAAA,CAAQ,CAAGD,CAAI,CAACE,EAAL,CAAQC,KAAR,CAAc,KAAd,CADuD,CAElEC,CAAO,CAAGH,CAAQ,CAAC,CAAD,CAFgD,CAGlEI,CAAW,CAAGJ,CAAQ,CAAC,CAAD,CAH4C,CAItEK,CAA2B,CAACF,CAAD,CAAU,aAAV,CAAyBC,CAAzB,CAC9B,CALD,EAOAE,CAAW,EACd,CAKD,QAASA,CAAAA,CAAT,EAAuB,CACnB,cAA2BC,MAAM,CAACC,OAAP,CAAetB,CAAf,CAA3B,gBAAmD,iBAAvCuB,CAAuC,MAAlCC,CAAkC,MAC/CC,CAAmB,CAACD,CAAK,QAAN,CAAmBA,CAAK,QAAxB,CAAqCD,CAArC,CACtB,CACJ,CAQD,QAASE,CAAAA,CAAT,CAA6BR,CAA7B,CAAsCS,CAAtC,CAA+CC,CAA/C,CAAwD,CACpD1B,CAAO,CAAC0B,CAAD,CAAP,CAAmB,GAAIC,CAAAA,EAAE,CAACC,MAAP,CAAc,QAAUF,CAAV,CAAoB,KAApB,CAA4BV,CAA1C,CAAmD,CAClEa,OAAO,CAAEb,CADyD,CAElEc,UAAU,CAAEL,CAFsD,CAGlEM,MAAM,CAAE,CACJ,QAAWC,CADP,CAH0D,CAAnD,CAOtB,CAMD,QAASA,CAAAA,CAAT,CAAoBC,CAApB,CAA2B,CACvB,GAAkB,GAAd,EAAAA,CAAK,CAACC,IAAV,CAAuB,CACnBC,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,sCAAnB,CACH,CACJ,CAQD,QAASnB,CAAAA,CAAT,CAAqCF,CAArC,CAA8CsB,CAA9C,CAAwDC,CAAxD,CAAgE,CAC5D,GAAIC,CAAAA,CAAO,CAAGC,IAAI,CAACC,KAAL,CACVrC,QAAQ,CAACsC,cAAT,CAAwB,QAAUJ,CAAV,CAAmB,KAAnB,CAA2BvB,CAAnD,EAA4D4B,YAA5D,CAAyEN,CAAzE,CADU,CAAd,CAEAvC,CAAM,CAACwC,CAAD,CAAN,CAAiB,CAACd,OAAO,CAAEe,CAAV,CAAmBxB,OAAO,CAAEA,CAA5B,CACpB,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript controller YouTube Videos.\n *\n * @module     filter_mbsyoutube/youtubevideos\n * @package    filter_mbsyoutube\n * @copyright  2019 Peter Mayer, ISB Bayern, peter.mayer@isb.bayern.de\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nlet videos = {};\nlet players = {};\n\nexport const init = () => {\n    initPlayer();\n\n    // If there is no mbsyoutube-ytiframe yet: Observe the DOM if there will be a change.\n    var observer = new MutationObserver(function () {\n        // Fired when a mutation occurs.\n        if (document.querySelectorAll('.mbsyoutube-ytiframe').length > 0) {\n            initPlayer();\n        }\n    });\n\n    // Define what element should be observed by the observer\n    // and what types of mutations trigger the callback\n    observer.observe(document, {\n        subtree: true,\n        childList: true\n    });\n}\n\n/**\n * Initialize the Players.\n */\nfunction initPlayer() {\n    \n    document.querySelectorAll('.mbsyoutube-ytiframe').forEach(function (node) {\n        var playerid = node.id.split(\"___\");\n        var videoid = playerid[2];\n        var videouniqid = playerid[1];\n        getJsonObjectFromIdAttribut(videoid, 'data-extern', videouniqid);\n    });\n\n    loadPlayers();\n}\n\n/**\n * Initialise the players.\n */\nfunction loadPlayers() {\n    for (const [key, value] of Object.entries(videos)) {\n        createYouTubePlayer(value['videoid'], value['ytparam'], key);\n    }\n}\n\n/**\n * Create a YouTube player for a given video and add it to the players object.\n * @param {string} videoid\n * @param {*} ytparam\n * @param {string} uniqeid\n */\nfunction createYouTubePlayer(videoid, ytparam, uniqeid) {\n    players[uniqeid] = new YT.Player('yt___' + uniqeid + '___' + videoid, {\n        videoId: videoid,\n        playerVars: ytparam,\n        events: {\n            'onError': catchError\n        }\n    });\n}\n\n/**\n * Catch errors.\n * @param {object} event\n */\nfunction catchError(event) {\n    if (event.data == 100) {\n        window.console.log(\"Error - The video is not accessible!\");\n    }\n}\n\n/**\n * Make a json object from a data attribute and add it to the video object.\n * @param {string} videoid\n * @param {string} attribut\n * @param {string} uniqid\n */\nfunction getJsonObjectFromIdAttribut(videoid, attribut, uniqid) {\n    var jsonobj = JSON.parse(\n        document.getElementById('yt___' + uniqid + '___' + videoid).getAttribute(attribut));\n    videos[uniqid] = {ytparam: jsonobj, videoid: videoid};\n}"],"file":"youtube_api.min.js"}